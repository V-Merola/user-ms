2024-08-31 16:52:07 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Starting UserMsApplication using Java 17.0.9 with PID 16192 (C:\Users\Vincenzo\Desktop\user-ms\target\classes started by Vincenzo in C:\Users\Vincenzo\Desktop\user-ms)
2024-08-31 16:52:07 [restartedMain] DEBUG c.v.user_ms.UserMsApplication - Running with Spring Boot v3.3.2, Spring v6.1.11
2024-08-31 16:52:07 [restartedMain] INFO  c.v.user_ms.UserMsApplication - No active profile set, falling back to 1 default profile: "default"
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:52:07 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Fetching config from server at : http://DESKTOP-INTQUT6.fritz.box:8889/
2024-08-31 16:52:07 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Located environment: name=user-ms, profiles=[default], label=null, version=d67da32aa7178575f33d3f2c801548307d3f9a88, state=null
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLoader - Environment user-ms has 1 property sources with 17 properties.
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:52:07 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-08-31 16:52:07 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 1 JPA repository interface.
2024-08-31 16:52:07 [restartedMain] DEBUG o.s.cloud.context.scope.GenericScope - Generating bean factory id from names: [apiTets, applicationAvailability, applicationFactory, applicationTaskExecutor, authenticationEventPublisher, authenticationManagerBuilder, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, blockingLoadBalancerClient, braveCurrentTraceContext, bravePropagator, braveSampler, braveSpanCustomizer, braveTracer, braveTracerBridge, braveTracing, cachesEndpoint, caffeineWarnLogger, characterEncodingFilter, classLoaderMetrics, classPathFileSystemWatcher, classPathRestartStrategy, clientConfigServerHealthIndicator, compositeCompatibilityVerifier, compositeDiscoveryClient, compositeSpanHandler, conditionEvaluationDeltaLoggingListener, conditionsReportEndpoint, configClientHealthProperties, configDataContextRefresher, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, conversionServicePostProcessor, correlationFieldsCorrelationScopeCustomizer, correlationScopeDecorator, currentSpanCustomizer, data-jpa.repository-aot-processor#0, dataSource, dataSourcePoolMetadataMeterBinder, dataSourceScriptDatabaseInitializer, dbHealthContributor, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration, default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification, defaultEurekaClientHttpRequestFactorySupplier, defaultLoadBalancerCacheManager, defaultServletHandlerMapping, defaultTracingObservationHandler, defaultValidator, defaultViewResolver, defaultsBindHandlerAdvisor, deferringLoadBalancerInterceptor, delegatingApplicationListener, discoveryClient, discoveryClientHealthIndicator, discoveryCompositeHealthContributor, diskSpaceHealthIndicator, diskSpaceMetrics, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, eagerTaskExecutorMetrics, eagerlyInitializeJmxEndpointExporter, emBeanDefinitionRegistrarPostProcessor, enableGlobalAuthenticationAutowiredConfigurer, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointObjectMapper, endpointObjectMapperWebMvcConfigurer, endpointObjectNameFactory, endpointOperationParameterMapper, entityManagerFactory, entityManagerFactoryBuilder, environmentEndpoint, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.client.rest-template-timeout-org.springframework.cloud.netflix.eureka.RestTemplateTimeoutProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaLoadBalancerProperties, eurekaRegistration, eurekaServiceRegistry, featuresEndpoint, feignChildContextInitializer, feignClient, feignClientBeanFactoryInitializationCodeGenerator, feignContext, feignFeature, feignTargeter, fileDescriptorMetrics, fileSystemWatcherFactory, fileWatcher, filterMappingDescriptionProvider, flashMapManager, formContentFilter, globalExceptionHandler, gson, gsonBuilder, handlerExceptionResolver, handlerFunctionAdapter, healthCheckController, healthContributorRegistry, healthEndpoint, healthEndpointGroupMembershipValidator, healthEndpointGroups, healthEndpointGroupsBeanPostProcessor, healthHttpCodeStatusMapper, healthStatusAggregator, heapDumpWebEndpoint, hikariDataSourceMeterBinder, hikariPoolDataSourceMetadataProvider, httpMessageConvertersRestClientCustomizer, httpRequestHandlerAdapter, inMemoryDatabaseShutdownExecutor, inMemoryUserDetailsManager, inetUtils, inetUtilsProperties, infoEndpoint, initializeAuthenticationProviderBeanManagerConfigurer, initializeUserDetailsBeanManagerConfigurer, jacksonGeoModule, jacksonObjectMapper, jacksonObjectMapperBuilder, jdbcClient, jdbcConnectionDetails, jdbcConnectionDetailsHikariBeanPostProcessor, jdbcTemplate, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jpa.UserRepository.fragments#0, jpa.named-queries#0, jpaContext, jpaMappingContext, jpaSharedEM_entityManagerFactory, jpaVendorAdapter, jsonComponentModule, jsonMixinModule, jsonMixinModuleEntries, jvmCompilationMetrics, jvmGcMetrics, jvmHeapPressureMetrics, jvmInfoMetrics, jvmMemoryMetrics, jvmThreadMetrics, jwtAuthenticationFilter, jwtService, lbRestClientPostProcessor, lifecycleProcessor, liveReloadServer, liveReloadServerEventListener, loadBalancedRestTemplateInitializerDeprecated, loadBalancerChildContextInitializer, loadBalancerClientFactory, loadBalancerClientsDefaultsMappingsProvider, loadBalancerEagerContextInitializer, loadBalancerInterceptor, loadBalancerRequestFactory, loadBalancerServiceInstanceCookieTransformer, localeCharsetMappingsCustomizer, localeResolver, logFileWebEndpoint, logbackMetrics, loggersEndpoint, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoint.sbom-org.springframework.boot.actuate.sbom.SbomProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.db-org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorProperties, management.health.diskspace-org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.observations-org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.simple.metrics.export-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.tracing-org.springframework.boot.actuate.autoconfigure.tracing.TracingProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, mdcCorrelationScopeDecoratorBuilder, messageConverters, meterRegistryCloser, meterRegistryPostProcessor, methodValidationPostProcessor, metricsAndTracingObservationHandlerGrouping, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRepositoryMethodInvocationListener, metricsRepositoryMethodInvocationListenerBeanPostProcessor, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcHandlerMappingIntrospectorRequestTransformer, mvcPathMatcher, mvcPatternParser, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, namedParameterJdbcTemplate, objectNamingStrategy, objectPostProcessor, observabilitySchedulingConfigurer, observationRegistry, observationRegistryPostProcessor, observationRestClientCustomizer, observationRestTemplateCustomizer, observedAspect, offsetResolver, optionalLiveReloadServer, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration$TracingAndMetricsObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MetricsWithTracingConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$ObservedAspectConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestClientObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.sbom.SbomEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksObservabilityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BraveAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$NoPropagation, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$PropagationWithBaggage, org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration, org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$PersistenceManagedTypesConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration, org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration, org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.internalConfigurationPropertiesBinder, org.springframework.boot.context.properties.BoundConfigurationProperties, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration$DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration, org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration$ResourceServerTokenRelayRegistrationAutoConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$DefaultLoadBalancerCacheManagerConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCacheManagerWarnConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$DefaultFeignTargeterConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$FeignJacksonConfiguration, org.springframework.cloud.openfeign.loadbalancer.DefaultFeignLoadBalancerConfiguration, org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension, org.springframework.data.jpa.util.JpaMetamodelCacheCleanup, org.springframework.data.web.config.ProjectingArgumentResolverRegistrar, org.springframework.data.web.config.SpringDataJacksonConfiguration, org.springframework.data.web.config.SpringDataWebConfiguration, org.springframework.data.web.config.SpringDataWebSettings, org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration, org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity, org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration, org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration, org.springframework.transaction.config.internalTransactionAdvisor, org.springframework.transaction.config.internalTransactionalEventListenerFactory, pageJacksonModule, pageModule, pageableCustomizer, pageableResolver, parameterNamesModule, pathMappedEndpoints, persistenceExceptionTranslationPostProcessor, persistenceManagedTypes, pingHealthContributor, platformTransactionManagerCustomizers, preserveErrorControllerTargetClassPostProcessor, privilegeEvaluator, processorMetrics, projectingArgumentResolverBeanPostProcessor, propagatingReceiverTracingObservationHandler, propagatingSenderTracingObservationHandler, propagationFactory, propagationFactoryBuilder, propertiesMeterFilter, propertiesObservationFilter, propertySourcesPlaceholderConfigurer, reactiveHealthContributorRegistry, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, refreshScopeLifecycle, registrationClient, registrationListener, registrator, remoteFieldsBaggagePropagationCustomizer, repositoryTagsProvider, requestContextFilter, requestDataValueProcessor, requestMappingHandlerAdapter, requestMappingHandlerMapping, requestMatcherProvider, resourceHandlerMapping, restClientBuilder, restClientBuilderConfigurer, restClientSsl, restTemplateBuilder, restTemplateBuilderConfigurer, restTemplateCustomizer, restTemplateDiscoveryClientOptionalArgs, restTemplateTransportClientFactories, restartingClassPathChangedEventListener, routerFunctionMapping, sbomEndpoint, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, securityConfig, securityFilterChain, securityFilterChainRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleAsyncTaskExecutorBuilder, simpleAsyncTaskSchedulerBuilder, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, sleuthPresentVerifier, sortCustomizer, sortModule, sortResolver, spring.boot.admin.client-de.codecentric.boot.admin.client.config.ClientProperties, spring.boot.admin.client.instance-de.codecentric.boot.admin.client.config.InstanceProperties, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties, spring.cloud.loadbalancer.cache-org.springframework.cloud.loadbalancer.cache.LoadBalancerCacheProperties, spring.cloud.loadbalancer.eager-load-org.springframework.cloud.client.loadbalancer.LoadBalancerEagerLoadProperties, spring.cloud.openfeign.client-org.springframework.cloud.openfeign.FeignClientProperties, spring.cloud.openfeign.encoder-org.springframework.cloud.openfeign.support.FeignEncoderProperties, spring.cloud.openfeign.httpclient-org.springframework.cloud.openfeign.support.FeignHttpClientProperties, spring.cloud.refresh-org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties, spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties, spring.devtools-org.springframework.boot.devtools.autoconfigure.DevToolsProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties, spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties, spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties, spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties, spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.reactor-org.springframework.boot.autoconfigure.reactor.ReactorProperties, spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties, spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties, spring.web-org.springframework.boot.autoconfigure.web.WebProperties, springApplicationAdminRegistrar, springBootVersionVerifier, springCloudCommonsFeatures, springSecurityFilterChain, springSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessor, sslBundleRegistry, sslPropertiesSslBundleRegistrar, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, startupDateMetadataContributor, startupTimeMetrics, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, themeResolver, threadPoolTaskExecutorBuilder, threadPoolTaskSchedulerBuilder, tlsProperties, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, tracingAwareMeterObservationHandler, transactionAttributeSource, transactionExecutionListeners, transactionInterceptor, transactionManager, transactionTemplate, uptimeMetrics, userController, userMsApplication, userRepository, userServiceImpl, viewControllerHandlerMapping, viewNameTranslator, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcObservationFilter, webSecurityExpressionHandler, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping, welcomePageNotAcceptableHandlerMapping, xForwarderHeadersFeignTransformer, xForwarderHeadersTransformer, zoneConfig]
2024-08-31 16:52:07 [restartedMain] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=625c296d-efb1-34da-bdff-5bd87c8aceb1
2024-08-31 16:52:08 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2024-08-31 16:52:08 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2024-08-31 16:52:08 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8007 (http)
2024-08-31 16:52:08 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-08-31 16:52:08 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-08-31 16:52:08 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-08-31 16:52:08 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 597 ms
2024-08-31 16:52:08 [restartedMain] DEBUG c.v.u.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2024-08-31 16:52:08 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-08-31 16:52:08 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-08-31 16:52:08 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-08-31 16:52:08 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Starting...
2024-08-31 16:52:08 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-3 - Added connection com.mysql.cj.jdbc.ConnectionImpl@47faf88f
2024-08-31 16:52:08 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Start completed.
2024-08-31 16:52:08 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-08-31 16:52:08 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 16:52:08 [restartedMain] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: eebbd5c8-fb4e-4eec-91d9-5c0eea027cc6

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2024-08-31 16:52:08 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2024-08-31 16:52:08 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/health
2024-08-31 16:52:08 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/info
2024-08-31 16:52:08 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2024-08-31 16:52:09 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2024-08-31 16:52:09 [restartedMain] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2024-08-31 16:52:09 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:52:09 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:52:09 [restartedMain] DEBUG o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
2024-08-31 16:52:09 [restartedMain] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2024-08-31 16:52:09 [restartedMain] INFO  o.s.c.n.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2024-08-31 16:52:09 [restartedMain] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2024-08-31 16:52:09 [restartedMain] DEBUG c.n.discovery.endpoint.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
2024-08-31 16:52:09 [restartedMain] DEBUG c.n.d.s.r.aws.ConfigClusterResolver - Config resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:52:09 [restartedMain] DEBUG c.n.d.s.r.a.ZoneAffinityClusterResolver - Local zone=defaultZone; resolved to: [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Disable delta property : false
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application is null : false
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application version is -1: true
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2024-08-31 16:52:09 [restartedMain] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:52:09 [restartedMain] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - The response status is 200
2024-08-31 16:52:09 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - Got full registry with apps hashcode UP_1_
2024-08-31 16:52:09 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 1
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2024-08-31 16:52:09 [restartedMain] INFO  c.n.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1725115929502 with initial instances count: 1
2024-08-31 16:52:09 [restartedMain] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Registering application USER-MS with eureka with status UP
2024-08-31 16:52:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725115929507, current=UP, previous=STARTING]
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:52:09 [restartedMain] DEBUG o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
2024-08-31 16:52:09 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8007 (http) with context path '/'
2024-08-31 16:52:09 [restartedMain] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 8007
2024-08-31 16:52:09 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Started UserMsApplication in 3.965 seconds (process running for 4472.271)
2024-08-31 16:52:09 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation delta:


==========================
CONDITION EVALUATION DELTA
==========================


Positive matches:
-----------------

   LogFileWebEndpointAutoConfiguration#logFileWebEndpoint matched:
      - Log File found logging.file.name logs/app.log (LogFileWebEndpointAutoConfiguration.LogFileCondition)
      - @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LogFileWebEndpoint; SearchStrategy: all) did not find any beans (OnBeanCondition)


Negative matches:
-----------------

   CachesEndpointAutoConfiguration#cachesEndpointWebExtension:
      Did not match:
         - @ConditionalOnAvailableEndpoint no 'management.endpoints' property marked it as exposed (OnAvailableEndpointCondition)
      Matched:
         - @ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpointWebExtension:
      Did not match:
         - @ConditionalOnAvailableEndpoint no 'management.endpoints' property marked it as exposed (OnAvailableEndpointCondition)
      Matched:
         - @ConditionalOnBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) found bean 'configurationPropertiesReportEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension:
      Did not match:
         - @ConditionalOnAvailableEndpoint no 'management.endpoints' property marked it as exposed (OnAvailableEndpointCondition)
      Matched:
         - @ConditionalOnBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)

   HealthEndpointWebExtensionConfiguration:
      Did not match:
         - @ConditionalOnAvailableEndpoint no 'management.endpoints' property marked it as exposed (OnAvailableEndpointCondition)
      Matched:
         - found 'session' scope (OnWebApplicationCondition)

   SbomEndpointAutoConfiguration#sbomEndpointWebExtension:
      Did not match:
         - @ConditionalOnAvailableEndpoint no 'management.endpoints' property marked it as exposed (OnAvailableEndpointCondition)
      Matched:
         - @ConditionalOnBean (types: org.springframework.boot.actuate.sbom.SbomEndpoint; SearchStrategy: all) found bean 'sbomEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.sbom.SbomEndpointWebExtension; SearchStrategy: all) did not find any beans (OnBeanCondition)


Exclusions:
-----------

    None


Unconditional classes:
----------------------

    None



2024-08-31 16:52:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:52:09 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 16:52:09 [http-nio-8007-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-08-31 16:52:09 [http-nio-8007-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-08-31 16:52:09 [http-nio-8007-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2024-08-31 16:52:09 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:52:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:52:28 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:52:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:52:38 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:52:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:52:39 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@1f4c119a instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@78639d73]]
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:52:39 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:52:41 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:52:41 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:52:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:52:58 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:52:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:09 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:53:09 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:53:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@7f63eed5 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@1b8f7c4f]]
2024-08-31 16:53:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:53:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:53:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:53:18 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:53:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:38 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:53:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:39 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@7c9f5db6 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@1bd835e7]]
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:53:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:53:41 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:41 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:46 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:46 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:49 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:49 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:53:51 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:51 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:54 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:54 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:56 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:56 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:58 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:53:59 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:53:59 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:53:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:01 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:01 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:04 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:04 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:06 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:06 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:09 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:09 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:10 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@4975ff81 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@77762525]]
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:54:10 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:54:11 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:11 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:14 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:14 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:16 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:16 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:18 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:54:19 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:19 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:21 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:21 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:24 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:24 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:26 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:26 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:29 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:29 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:31 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:31 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:34 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:34 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:36 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:36 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:38 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:54:39 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:39 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:40 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@5ea4b433 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@653837a7]]
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:54:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:54:41 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:41 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:44 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:44 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:46 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:54:46 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:54:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:54:58 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:54:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:06 [File Watcher] INFO  o.s.b.d.a.LocalDevToolsAutoConfiguration$RestartingClassPathChangeChangedEventListener - Restarting due to 1 class path change (0 additions, 0 deletions, 1 modification)
2024-08-31 16:55:06 [Thread-13] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Unregistering application USER-MS with eureka with status DOWN
2024-08-31 16:55:06 [Thread-13] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116106893, current=DOWN, previous=UP]
2024-08-31 16:55:06 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 16:55:06 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 16:55:06 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 16:55:06 [Thread-13] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 16:55:06 [Thread-13] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown initiated...
2024-08-31 16:55:06 [Thread-13] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-3 - Shutdown completed.
2024-08-31 16:55:06 [Thread-13] INFO  c.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2024-08-31 16:55:06 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 16:55:06 [Thread-13] INFO  c.netflix.discovery.DiscoveryClient - Unregistering ...
2024-08-31 16:55:07 [Thread-13] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - deregister  status: 200
2024-08-31 16:55:07 [Thread-13] INFO  c.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2024-08-31 16:55:07 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Starting UserMsApplication using Java 17.0.9 with PID 16192 (C:\Users\Vincenzo\Desktop\user-ms\target\classes started by Vincenzo in C:\Users\Vincenzo\Desktop\user-ms)
2024-08-31 16:55:07 [restartedMain] DEBUG c.v.user_ms.UserMsApplication - Running with Spring Boot v3.3.2, Spring v6.1.11
2024-08-31 16:55:07 [restartedMain] INFO  c.v.user_ms.UserMsApplication - No active profile set, falling back to 1 default profile: "default"
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:55:07 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Fetching config from server at : http://DESKTOP-INTQUT6.fritz.box:8889/
2024-08-31 16:55:07 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Located environment: name=user-ms, profiles=[default], label=null, version=d67da32aa7178575f33d3f2c801548307d3f9a88, state=null
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLoader - Environment user-ms has 1 property sources with 17 properties.
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:55:07 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:55:08 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-08-31 16:55:08 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 8 ms. Found 1 JPA repository interface.
2024-08-31 16:55:08 [restartedMain] DEBUG o.s.cloud.context.scope.GenericScope - Generating bean factory id from names: [apiTets, applicationAvailability, applicationFactory, applicationTaskExecutor, authenticationEventPublisher, authenticationManagerBuilder, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, blockingLoadBalancerClient, braveCurrentTraceContext, bravePropagator, braveSampler, braveSpanCustomizer, braveTracer, braveTracerBridge, braveTracing, cachesEndpoint, caffeineWarnLogger, characterEncodingFilter, classLoaderMetrics, classPathFileSystemWatcher, classPathRestartStrategy, clientConfigServerHealthIndicator, compositeCompatibilityVerifier, compositeDiscoveryClient, compositeSpanHandler, conditionEvaluationDeltaLoggingListener, conditionsReportEndpoint, configClientHealthProperties, configDataContextRefresher, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, conversionServicePostProcessor, correlationFieldsCorrelationScopeCustomizer, correlationScopeDecorator, currentSpanCustomizer, data-jpa.repository-aot-processor#0, dataSource, dataSourcePoolMetadataMeterBinder, dataSourceScriptDatabaseInitializer, dbHealthContributor, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration, default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification, defaultEurekaClientHttpRequestFactorySupplier, defaultLoadBalancerCacheManager, defaultServletHandlerMapping, defaultTracingObservationHandler, defaultValidator, defaultViewResolver, defaultsBindHandlerAdvisor, deferringLoadBalancerInterceptor, delegatingApplicationListener, discoveryClient, discoveryClientHealthIndicator, discoveryCompositeHealthContributor, diskSpaceHealthIndicator, diskSpaceMetrics, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, eagerTaskExecutorMetrics, eagerlyInitializeJmxEndpointExporter, emBeanDefinitionRegistrarPostProcessor, enableGlobalAuthenticationAutowiredConfigurer, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointObjectMapper, endpointObjectMapperWebMvcConfigurer, endpointObjectNameFactory, endpointOperationParameterMapper, entityManagerFactory, entityManagerFactoryBuilder, environmentEndpoint, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.client.rest-template-timeout-org.springframework.cloud.netflix.eureka.RestTemplateTimeoutProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaLoadBalancerProperties, eurekaRegistration, eurekaServiceRegistry, featuresEndpoint, feignChildContextInitializer, feignClient, feignClientBeanFactoryInitializationCodeGenerator, feignContext, feignFeature, feignTargeter, fileDescriptorMetrics, fileSystemWatcherFactory, fileWatcher, filterMappingDescriptionProvider, flashMapManager, formContentFilter, globalExceptionHandler, gson, gsonBuilder, handlerExceptionResolver, handlerFunctionAdapter, healthCheckController, healthContributorRegistry, healthEndpoint, healthEndpointGroupMembershipValidator, healthEndpointGroups, healthEndpointGroupsBeanPostProcessor, healthHttpCodeStatusMapper, healthStatusAggregator, heapDumpWebEndpoint, hikariDataSourceMeterBinder, hikariPoolDataSourceMetadataProvider, httpMessageConvertersRestClientCustomizer, httpRequestHandlerAdapter, inMemoryDatabaseShutdownExecutor, inMemoryUserDetailsManager, inetUtils, inetUtilsProperties, infoEndpoint, initializeAuthenticationProviderBeanManagerConfigurer, initializeUserDetailsBeanManagerConfigurer, jacksonGeoModule, jacksonObjectMapper, jacksonObjectMapperBuilder, jdbcClient, jdbcConnectionDetails, jdbcConnectionDetailsHikariBeanPostProcessor, jdbcTemplate, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jpa.UserRepository.fragments#0, jpa.named-queries#0, jpaContext, jpaMappingContext, jpaSharedEM_entityManagerFactory, jpaVendorAdapter, jsonComponentModule, jsonMixinModule, jsonMixinModuleEntries, jvmCompilationMetrics, jvmGcMetrics, jvmHeapPressureMetrics, jvmInfoMetrics, jvmMemoryMetrics, jvmThreadMetrics, jwtAuthenticationFilter, jwtService, lbRestClientPostProcessor, lifecycleProcessor, liveReloadServer, liveReloadServerEventListener, loadBalancedRestTemplateInitializerDeprecated, loadBalancerChildContextInitializer, loadBalancerClientFactory, loadBalancerClientsDefaultsMappingsProvider, loadBalancerEagerContextInitializer, loadBalancerInterceptor, loadBalancerRequestFactory, loadBalancerServiceInstanceCookieTransformer, localeCharsetMappingsCustomizer, localeResolver, logFileWebEndpoint, logbackMetrics, loggersEndpoint, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoint.sbom-org.springframework.boot.actuate.sbom.SbomProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.db-org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorProperties, management.health.diskspace-org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.observations-org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.simple.metrics.export-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.tracing-org.springframework.boot.actuate.autoconfigure.tracing.TracingProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, mdcCorrelationScopeDecoratorBuilder, messageConverters, meterRegistryCloser, meterRegistryPostProcessor, methodValidationPostProcessor, metricsAndTracingObservationHandlerGrouping, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRepositoryMethodInvocationListener, metricsRepositoryMethodInvocationListenerBeanPostProcessor, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcHandlerMappingIntrospectorRequestTransformer, mvcPathMatcher, mvcPatternParser, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, namedParameterJdbcTemplate, objectNamingStrategy, objectPostProcessor, observabilitySchedulingConfigurer, observationRegistry, observationRegistryPostProcessor, observationRestClientCustomizer, observationRestTemplateCustomizer, observedAspect, offsetResolver, optionalLiveReloadServer, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration$TracingAndMetricsObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MetricsWithTracingConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$ObservedAspectConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestClientObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.sbom.SbomEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksObservabilityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BraveAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$NoPropagation, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$PropagationWithBaggage, org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration, org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$PersistenceManagedTypesConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration, org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration, org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.internalConfigurationPropertiesBinder, org.springframework.boot.context.properties.BoundConfigurationProperties, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration$DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration, org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration$ResourceServerTokenRelayRegistrationAutoConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$DefaultLoadBalancerCacheManagerConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCacheManagerWarnConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$DefaultFeignTargeterConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$FeignJacksonConfiguration, org.springframework.cloud.openfeign.loadbalancer.DefaultFeignLoadBalancerConfiguration, org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension, org.springframework.data.jpa.util.JpaMetamodelCacheCleanup, org.springframework.data.web.config.ProjectingArgumentResolverRegistrar, org.springframework.data.web.config.SpringDataJacksonConfiguration, org.springframework.data.web.config.SpringDataWebConfiguration, org.springframework.data.web.config.SpringDataWebSettings, org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration, org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity, org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration, org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration, org.springframework.transaction.config.internalTransactionAdvisor, org.springframework.transaction.config.internalTransactionalEventListenerFactory, pageJacksonModule, pageModule, pageableCustomizer, pageableResolver, parameterNamesModule, pathMappedEndpoints, persistenceExceptionTranslationPostProcessor, persistenceManagedTypes, pingHealthContributor, platformTransactionManagerCustomizers, preserveErrorControllerTargetClassPostProcessor, privilegeEvaluator, processorMetrics, projectingArgumentResolverBeanPostProcessor, propagatingReceiverTracingObservationHandler, propagatingSenderTracingObservationHandler, propagationFactory, propagationFactoryBuilder, propertiesMeterFilter, propertiesObservationFilter, propertySourcesPlaceholderConfigurer, reactiveHealthContributorRegistry, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, refreshScopeLifecycle, registrationClient, registrationListener, registrator, remoteFieldsBaggagePropagationCustomizer, repositoryTagsProvider, requestContextFilter, requestDataValueProcessor, requestMappingHandlerAdapter, requestMappingHandlerMapping, requestMatcherProvider, resourceHandlerMapping, restClientBuilder, restClientBuilderConfigurer, restClientSsl, restTemplateBuilder, restTemplateBuilderConfigurer, restTemplateCustomizer, restTemplateDiscoveryClientOptionalArgs, restTemplateTransportClientFactories, restartingClassPathChangedEventListener, routerFunctionMapping, sbomEndpoint, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, securityConfig, securityFilterChain, securityFilterChainRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleAsyncTaskExecutorBuilder, simpleAsyncTaskSchedulerBuilder, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, sleuthPresentVerifier, sortCustomizer, sortModule, sortResolver, spring.boot.admin.client-de.codecentric.boot.admin.client.config.ClientProperties, spring.boot.admin.client.instance-de.codecentric.boot.admin.client.config.InstanceProperties, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties, spring.cloud.loadbalancer.cache-org.springframework.cloud.loadbalancer.cache.LoadBalancerCacheProperties, spring.cloud.loadbalancer.eager-load-org.springframework.cloud.client.loadbalancer.LoadBalancerEagerLoadProperties, spring.cloud.openfeign.client-org.springframework.cloud.openfeign.FeignClientProperties, spring.cloud.openfeign.encoder-org.springframework.cloud.openfeign.support.FeignEncoderProperties, spring.cloud.openfeign.httpclient-org.springframework.cloud.openfeign.support.FeignHttpClientProperties, spring.cloud.refresh-org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties, spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties, spring.devtools-org.springframework.boot.devtools.autoconfigure.DevToolsProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties, spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties, spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties, spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties, spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.reactor-org.springframework.boot.autoconfigure.reactor.ReactorProperties, spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties, spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties, spring.web-org.springframework.boot.autoconfigure.web.WebProperties, springApplicationAdminRegistrar, springBootVersionVerifier, springCloudCommonsFeatures, springSecurityFilterChain, springSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessor, sslBundleRegistry, sslPropertiesSslBundleRegistrar, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, startupDateMetadataContributor, startupTimeMetrics, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, themeResolver, threadPoolTaskExecutorBuilder, threadPoolTaskSchedulerBuilder, tlsProperties, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, tracingAwareMeterObservationHandler, transactionAttributeSource, transactionExecutionListeners, transactionInterceptor, transactionManager, transactionTemplate, uptimeMetrics, userController, userMsApplication, userRepository, userServiceImpl, viewControllerHandlerMapping, viewNameTranslator, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcObservationFilter, webSecurityExpressionHandler, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping, welcomePageNotAcceptableHandlerMapping, xForwarderHeadersFeignTransformer, xForwarderHeadersTransformer, zoneConfig]
2024-08-31 16:55:08 [restartedMain] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=625c296d-efb1-34da-bdff-5bd87c8aceb1
2024-08-31 16:55:08 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2024-08-31 16:55:08 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2024-08-31 16:55:08 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8007 (http)
2024-08-31 16:55:08 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-08-31 16:55:08 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-08-31 16:55:08 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-08-31 16:55:08 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 609 ms
2024-08-31 16:55:08 [restartedMain] DEBUG c.v.u.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2024-08-31 16:55:08 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-08-31 16:55:08 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-08-31 16:55:08 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-08-31 16:55:08 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Starting...
2024-08-31 16:55:08 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-4 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2347613e
2024-08-31 16:55:08 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Start completed.
2024-08-31 16:55:08 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-08-31 16:55:08 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 16:55:08 [restartedMain] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 1c0c3cb2-5630-4aa7-9f75-ef35c9c55194

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2024-08-31 16:55:08 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/health
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/info
2024-08-31 16:55:09 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2024-08-31 16:55:09 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2024-08-31 16:55:09 [restartedMain] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
2024-08-31 16:55:09 [restartedMain] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2024-08-31 16:55:09 [restartedMain] INFO  o.s.c.n.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2024-08-31 16:55:09 [restartedMain] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2024-08-31 16:55:09 [restartedMain] DEBUG c.n.discovery.endpoint.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
2024-08-31 16:55:09 [restartedMain] DEBUG c.n.d.s.r.aws.ConfigClusterResolver - Config resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:55:09 [restartedMain] DEBUG c.n.d.s.r.a.ZoneAffinityClusterResolver - Local zone=defaultZone; resolved to: [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Disable delta property : false
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application is null : false
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application version is -1: true
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2024-08-31 16:55:09 [restartedMain] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:55:09 [restartedMain] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - The response status is 200
2024-08-31 16:55:09 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - Got full registry with apps hashcode UP_2_
2024-08-31 16:55:09 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2024-08-31 16:55:09 [restartedMain] INFO  c.n.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1725116109963 with initial instances count: 2
2024-08-31 16:55:09 [restartedMain] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Registering application USER-MS with eureka with status UP
2024-08-31 16:55:09 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116109969, current=UP, previous=STARTING]
2024-08-31 16:55:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 16:55:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 16:55:09 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 16:55:09 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:55:09 [restartedMain] DEBUG o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
2024-08-31 16:55:09 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8007 (http) with context path '/'
2024-08-31 16:55:09 [restartedMain] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 8007
2024-08-31 16:55:10 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:55:10 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Started UserMsApplication in 2.919 seconds (process running for 4652.739)
2024-08-31 16:55:10 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 16:55:10 [restartedMain] INFO  o.s.b.d.a.ConditionEvaluationDeltaLoggingListener - Condition evaluation unchanged
2024-08-31 16:55:10 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:18 [http-nio-8007-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-08-31 16:55:18 [http-nio-8007-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-08-31 16:55:18 [http-nio-8007-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 6 ms
2024-08-31 16:55:18 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:55:20 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:30 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:38 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:55:40 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:55:40 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@2d8fda5f instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@29b04b36]]
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:55:40 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:55:41 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:55:41 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:55:50 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:55:58 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:56:00 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:56:08 [RMI TCP Connection(76)-127.0.0.1] INFO  o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin - Application shutdown requested.
2024-08-31 16:56:08 [RMI TCP Connection(76)-127.0.0.1] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Unregistering application USER-MS with eureka with status DOWN
2024-08-31 16:56:08 [RMI TCP Connection(76)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116168987, current=DOWN, previous=UP]
2024-08-31 16:56:08 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 16:56:08 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 16:56:08 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown initiated...
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-4 - Shutdown completed.
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2024-08-31 16:56:09 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Unregistering ...
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - deregister  status: 200
2024-08-31 16:56:09 [RMI TCP Connection(76)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2024-08-31 16:59:10 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-08-31 16:59:10 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Starting UserMsApplication using Java 17.0.9 with PID 1680 (C:\Users\Vincenzo\Desktop\user-ms\target\classes started by Vincenzo in C:\Users\Vincenzo\Desktop\user-ms)
2024-08-31 16:59:10 [restartedMain] DEBUG c.v.user_ms.UserMsApplication - Running with Spring Boot v3.3.2, Spring v6.1.11
2024-08-31 16:59:10 [restartedMain] INFO  c.v.user_ms.UserMsApplication - No active profile set, falling back to 1 default profile: "default"
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:59:10 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Fetching config from server at : http://DESKTOP-INTQUT6.fritz.box:8889/
2024-08-31 16:59:10 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Located environment: name=user-ms, profiles=[default], label=null, version=78a5b886822b7f55f375c802780f45c4e507b49c, state=null
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLoader - Environment user-ms has 1 property sources with 18 properties.
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:59:10 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 16:59:10 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-08-31 16:59:10 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-08-31 16:59:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-08-31 16:59:11 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 146 ms. Found 1 JPA repository interface.
2024-08-31 16:59:11 [restartedMain] DEBUG o.s.cloud.context.scope.GenericScope - Generating bean factory id from names: [apiTets, applicationAvailability, applicationFactory, applicationTaskExecutor, authenticationEventPublisher, authenticationManagerBuilder, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, blockingLoadBalancerClient, braveCurrentTraceContext, bravePropagator, braveSampler, braveSpanCustomizer, braveTracer, braveTracerBridge, braveTracing, cachesEndpoint, caffeineWarnLogger, characterEncodingFilter, classLoaderMetrics, classPathFileSystemWatcher, classPathRestartStrategy, clientConfigServerHealthIndicator, compositeCompatibilityVerifier, compositeDiscoveryClient, compositeSpanHandler, conditionEvaluationDeltaLoggingListener, conditionsReportEndpoint, configClientHealthProperties, configDataContextRefresher, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, conversionServicePostProcessor, correlationFieldsCorrelationScopeCustomizer, correlationScopeDecorator, currentSpanCustomizer, data-jpa.repository-aot-processor#0, dataSource, dataSourcePoolMetadataMeterBinder, dataSourceScriptDatabaseInitializer, dbHealthContributor, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration, default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification, defaultEurekaClientHttpRequestFactorySupplier, defaultLoadBalancerCacheManager, defaultServletHandlerMapping, defaultTracingObservationHandler, defaultValidator, defaultViewResolver, defaultsBindHandlerAdvisor, deferringLoadBalancerInterceptor, delegatingApplicationListener, discoveryClient, discoveryClientHealthIndicator, discoveryCompositeHealthContributor, diskSpaceHealthIndicator, diskSpaceMetrics, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, eagerTaskExecutorMetrics, eagerlyInitializeJmxEndpointExporter, emBeanDefinitionRegistrarPostProcessor, enableGlobalAuthenticationAutowiredConfigurer, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointObjectMapper, endpointObjectMapperWebMvcConfigurer, endpointObjectNameFactory, endpointOperationParameterMapper, entityManagerFactory, entityManagerFactoryBuilder, environmentEndpoint, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.client.rest-template-timeout-org.springframework.cloud.netflix.eureka.RestTemplateTimeoutProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaLoadBalancerProperties, eurekaRegistration, eurekaServiceRegistry, featuresEndpoint, feignChildContextInitializer, feignClient, feignClientBeanFactoryInitializationCodeGenerator, feignContext, feignFeature, feignTargeter, fileDescriptorMetrics, fileSystemWatcherFactory, fileWatcher, filterMappingDescriptionProvider, flashMapManager, formContentFilter, globalExceptionHandler, gson, gsonBuilder, handlerExceptionResolver, handlerFunctionAdapter, healthCheckController, healthContributorRegistry, healthEndpoint, healthEndpointGroupMembershipValidator, healthEndpointGroups, healthEndpointGroupsBeanPostProcessor, healthHttpCodeStatusMapper, healthStatusAggregator, heapDumpWebEndpoint, hikariDataSourceMeterBinder, hikariPoolDataSourceMetadataProvider, httpMessageConvertersRestClientCustomizer, httpRequestHandlerAdapter, inMemoryDatabaseShutdownExecutor, inMemoryUserDetailsManager, inetUtils, inetUtilsProperties, infoEndpoint, initializeAuthenticationProviderBeanManagerConfigurer, initializeUserDetailsBeanManagerConfigurer, jacksonGeoModule, jacksonObjectMapper, jacksonObjectMapperBuilder, jdbcClient, jdbcConnectionDetails, jdbcConnectionDetailsHikariBeanPostProcessor, jdbcTemplate, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jpa.UserRepository.fragments#0, jpa.named-queries#0, jpaContext, jpaMappingContext, jpaSharedEM_entityManagerFactory, jpaVendorAdapter, jsonComponentModule, jsonMixinModule, jsonMixinModuleEntries, jvmCompilationMetrics, jvmGcMetrics, jvmHeapPressureMetrics, jvmInfoMetrics, jvmMemoryMetrics, jvmThreadMetrics, jwtAuthenticationFilter, jwtService, lbRestClientPostProcessor, lifecycleProcessor, liveReloadServer, liveReloadServerEventListener, loadBalancedRestTemplateInitializerDeprecated, loadBalancerChildContextInitializer, loadBalancerClientFactory, loadBalancerClientsDefaultsMappingsProvider, loadBalancerEagerContextInitializer, loadBalancerInterceptor, loadBalancerRequestFactory, loadBalancerServiceInstanceCookieTransformer, localeCharsetMappingsCustomizer, localeResolver, logFileWebEndpoint, logbackMetrics, loggersEndpoint, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoint.sbom-org.springframework.boot.actuate.sbom.SbomProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.db-org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorProperties, management.health.diskspace-org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.observations-org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.simple.metrics.export-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.tracing-org.springframework.boot.actuate.autoconfigure.tracing.TracingProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, mdcCorrelationScopeDecoratorBuilder, messageConverters, meterRegistryCloser, meterRegistryPostProcessor, methodValidationPostProcessor, metricsAndTracingObservationHandlerGrouping, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRepositoryMethodInvocationListener, metricsRepositoryMethodInvocationListenerBeanPostProcessor, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcHandlerMappingIntrospectorRequestTransformer, mvcPathMatcher, mvcPatternParser, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, namedParameterJdbcTemplate, objectNamingStrategy, objectPostProcessor, observabilitySchedulingConfigurer, observationRegistry, observationRegistryPostProcessor, observationRestClientCustomizer, observationRestTemplateCustomizer, observedAspect, offsetResolver, optionalLiveReloadServer, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration$TracingAndMetricsObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MetricsWithTracingConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$ObservedAspectConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestClientObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.sbom.SbomEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksObservabilityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BraveAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$NoPropagation, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$PropagationWithBaggage, org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration, org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$PersistenceManagedTypesConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration, org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration, org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.internalConfigurationPropertiesBinder, org.springframework.boot.context.properties.BoundConfigurationProperties, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration$DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration, org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration$ResourceServerTokenRelayRegistrationAutoConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$DefaultLoadBalancerCacheManagerConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCacheManagerWarnConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$DefaultFeignTargeterConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$FeignJacksonConfiguration, org.springframework.cloud.openfeign.loadbalancer.DefaultFeignLoadBalancerConfiguration, org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension, org.springframework.data.jpa.util.JpaMetamodelCacheCleanup, org.springframework.data.web.config.ProjectingArgumentResolverRegistrar, org.springframework.data.web.config.SpringDataJacksonConfiguration, org.springframework.data.web.config.SpringDataWebConfiguration, org.springframework.data.web.config.SpringDataWebSettings, org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration, org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity, org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration, org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration, org.springframework.transaction.config.internalTransactionAdvisor, org.springframework.transaction.config.internalTransactionalEventListenerFactory, pageJacksonModule, pageModule, pageableCustomizer, pageableResolver, parameterNamesModule, pathMappedEndpoints, persistenceExceptionTranslationPostProcessor, persistenceManagedTypes, pingHealthContributor, platformTransactionManagerCustomizers, preserveErrorControllerTargetClassPostProcessor, privilegeEvaluator, processorMetrics, projectingArgumentResolverBeanPostProcessor, propagatingReceiverTracingObservationHandler, propagatingSenderTracingObservationHandler, propagationFactory, propagationFactoryBuilder, propertiesMeterFilter, propertiesObservationFilter, propertySourcesPlaceholderConfigurer, reactiveHealthContributorRegistry, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, refreshScopeLifecycle, registrationClient, registrationListener, registrator, remoteFieldsBaggagePropagationCustomizer, repositoryTagsProvider, requestContextFilter, requestDataValueProcessor, requestMappingHandlerAdapter, requestMappingHandlerMapping, requestMatcherProvider, resourceHandlerMapping, restClientBuilder, restClientBuilderConfigurer, restClientSsl, restTemplateBuilder, restTemplateBuilderConfigurer, restTemplateCustomizer, restTemplateDiscoveryClientOptionalArgs, restTemplateTransportClientFactories, restartingClassPathChangedEventListener, routerFunctionMapping, sbomEndpoint, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, securityConfig, securityFilterChain, securityFilterChainRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleAsyncTaskExecutorBuilder, simpleAsyncTaskSchedulerBuilder, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, sleuthPresentVerifier, sortCustomizer, sortModule, sortResolver, spring.boot.admin.client-de.codecentric.boot.admin.client.config.ClientProperties, spring.boot.admin.client.instance-de.codecentric.boot.admin.client.config.InstanceProperties, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties, spring.cloud.loadbalancer.cache-org.springframework.cloud.loadbalancer.cache.LoadBalancerCacheProperties, spring.cloud.loadbalancer.eager-load-org.springframework.cloud.client.loadbalancer.LoadBalancerEagerLoadProperties, spring.cloud.openfeign.client-org.springframework.cloud.openfeign.FeignClientProperties, spring.cloud.openfeign.encoder-org.springframework.cloud.openfeign.support.FeignEncoderProperties, spring.cloud.openfeign.httpclient-org.springframework.cloud.openfeign.support.FeignHttpClientProperties, spring.cloud.refresh-org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties, spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties, spring.devtools-org.springframework.boot.devtools.autoconfigure.DevToolsProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties, spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties, spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties, spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties, spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.reactor-org.springframework.boot.autoconfigure.reactor.ReactorProperties, spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties, spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties, spring.web-org.springframework.boot.autoconfigure.web.WebProperties, springApplicationAdminRegistrar, springBootVersionVerifier, springCloudCommonsFeatures, springSecurityFilterChain, springSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessor, sslBundleRegistry, sslPropertiesSslBundleRegistrar, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, startupDateMetadataContributor, startupTimeMetrics, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, themeResolver, threadPoolTaskExecutorBuilder, threadPoolTaskSchedulerBuilder, tlsProperties, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, tracingAwareMeterObservationHandler, transactionAttributeSource, transactionExecutionListeners, transactionInterceptor, transactionManager, transactionTemplate, uptimeMetrics, userController, userMsApplication, userRepository, userServiceImpl, viewControllerHandlerMapping, viewNameTranslator, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcObservationFilter, webSecurityExpressionHandler, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping, welcomePageNotAcceptableHandlerMapping, xForwarderHeadersFeignTransformer, xForwarderHeadersTransformer, zoneConfig]
2024-08-31 16:59:11 [restartedMain] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=625c296d-efb1-34da-bdff-5bd87c8aceb1
2024-08-31 16:59:12 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2024-08-31 16:59:12 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2024-08-31 16:59:12 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8007 (http)
2024-08-31 16:59:12 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8007"]
2024-08-31 16:59:12 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-08-31 16:59:12 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-08-31 16:59:12 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-08-31 16:59:12 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2439 ms
2024-08-31 16:59:13 [restartedMain] DEBUG c.v.u.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2024-08-31 16:59:13 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-08-31 16:59:13 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-08-31 16:59:13 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-08-31 16:59:13 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-08-31 16:59:13 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-08-31 16:59:13 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4da519b1
2024-08-31 16:59:13 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-08-31 16:59:15 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-08-31 16:59:15 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 16:59:15 [restartedMain] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 02aa6bf4-0d53-4b38-a160-291ad4c9a7aa

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2024-08-31 16:59:15 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2024-08-31 16:59:16 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/health
2024-08-31 16:59:16 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/info
2024-08-31 16:59:16 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2024-08-31 16:59:16 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2024-08-31 16:59:16 [restartedMain] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2024-08-31 16:59:16 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:59:16 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 16:59:16 [restartedMain] DEBUG o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
2024-08-31 16:59:16 [restartedMain] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2024-08-31 16:59:17 [restartedMain] INFO  o.s.c.n.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2024-08-31 16:59:17 [restartedMain] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2024-08-31 16:59:17 [restartedMain] DEBUG c.n.discovery.endpoint.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
2024-08-31 16:59:17 [restartedMain] DEBUG c.n.d.s.r.aws.ConfigClusterResolver - Config resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:59:17 [restartedMain] DEBUG c.n.d.s.r.a.ZoneAffinityClusterResolver - Local zone=defaultZone; resolved to: [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Disable delta property : false
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application is null : false
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application version is -1: true
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2024-08-31 16:59:17 [restartedMain] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:59:17 [restartedMain] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - The response status is 200
2024-08-31 16:59:17 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - Got full registry with apps hashcode UP_1_
2024-08-31 16:59:17 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 1
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2024-08-31 16:59:17 [restartedMain] INFO  c.n.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1725116357276 with initial instances count: 1
2024-08-31 16:59:17 [restartedMain] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Registering application USER-MS with eureka with status UP
2024-08-31 16:59:17 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116357283, current=UP, previous=STARTING]
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 16:59:17 [restartedMain] DEBUG o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
2024-08-31 16:59:17 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8007"]
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 16:59:17 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8007 (http) with context path '/'
2024-08-31 16:59:17 [restartedMain] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 8007
2024-08-31 16:59:17 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Started UserMsApplication in 9.609 seconds (process running for 10.401)
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 16:59:17 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 16:59:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:59:18 [http-nio-8007-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-08-31 16:59:18 [http-nio-8007-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-08-31 16:59:18 [http-nio-8007-exec-2] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-08-31 16:59:18 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:59:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:59:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:59:38 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:59:41 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:59:41 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 16:59:47 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 16:59:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@415a79e2 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@55771792]]
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 16:59:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 16:59:55 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:59:55 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:59:56 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/system.cpu.usage.]
2024-08-31 16:59:56 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics/process.cpu.usage.]
2024-08-31 16:59:57 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/metrics.]
2024-08-31 16:59:57 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/info.]
2024-08-31 16:59:57 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 16:59:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 16:59:58 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:00:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:17 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@e5b1b56 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@637d4688]]
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:00:17 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:00:18 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:00:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:38 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:00:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:47 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@b8a7e80 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@24a307f]]
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:00:47 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:00:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:00:58 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:01:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:17 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@67ffe920 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@50ebb9e6]]
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:01:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:01:18 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:01:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:38 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:01:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:47 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@22e83a44 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@e035858]]
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:01:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:01:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:01:58 [http-nio-8007-exec-8] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:02:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:18 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:02:18 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@413a4180 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@24f0129f]]
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:02:18 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:02:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:38 [http-nio-8007-exec-10] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:02:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:48 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@52fc0695 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@7aa8bcbc]]
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:02:48 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:02:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:02:58 [http-nio-8007-exec-2] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:03:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:18 [http-nio-8007-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:03:18 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@760597d4 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@75383f28]]
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:03:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:03:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:38 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:03:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:48 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@47c247b4 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@78304eac]]
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:03:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:03:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:03:58 [http-nio-8007-exec-3] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:04:00 [http-nio-8007-exec-6] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:04:04 [http-nio-8007-exec-7] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator.]
2024-08-31 17:04:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:04:08 [http-nio-8007-exec-9] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/loggers.]
2024-08-31 17:04:17 [AsyncResolver-bootstrap-executor-%d] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2024-08-31 17:04:17 [AsyncResolver-bootstrap-executor-%d] DEBUG c.n.discovery.endpoint.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
2024-08-31 17:04:17 [AsyncResolver-bootstrap-executor-%d] DEBUG c.n.d.s.r.aws.ConfigClusterResolver - Config resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 17:04:17 [AsyncResolver-bootstrap-executor-%d] DEBUG c.n.d.s.r.a.ZoneAffinityClusterResolver - Local zone=defaultZone; resolved to: [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 17:04:17 [AsyncResolver-bootstrap-executor-%d] DEBUG c.n.d.shared.resolver.AsyncResolver - Resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 17:04:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:04:18 [http-nio-8007-exec-4] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:04:18 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@2251cd49 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@16a46754]]
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:04:19 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:04:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:04:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:04:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:04:48 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:04:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:04:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@438e6dd3 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@39310e20]]
2024-08-31 17:04:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:04:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:04:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:04:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:18 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@1526a7ca instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@200decfd]]
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:05:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:05:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:05:49 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 0
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@10ddfdda instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@21acb1ef]]
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:05:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:05:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:19 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 0
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@1145ae7 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@4e31243c]]
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:06:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:06:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:36 [http-nio-8007-exec-5] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.servlet.resource.NoResourceFoundException: No static resource actuator/health.]
2024-08-31 17:06:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:06:49 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 0
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@31fd230d instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@759acf14]]
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:06:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:06:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:07 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:17 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:19 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 0
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@567a6022 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@112dbe15]]
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:07:21 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:07:27 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:37 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:47 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:07:49 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 0
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@49101276 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@6a51862f]]
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:07:51 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:07:57 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin - Application shutdown requested.
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Unregistering application USER-MS with eureka with status DOWN
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116886750, current=DOWN, previous=UP]
2024-08-31 17:08:06 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 17:08:06 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 17:08:06 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8007"]
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2024-08-31 17:08:06 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Unregistering ...
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - deregister  status: 200
2024-08-31 17:08:06 [RMI TCP Connection(13)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
2024-08-31 17:09:12 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-08-31 17:09:12 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Starting UserMsApplication using Java 17.0.9 with PID 17912 (C:\Users\Vincenzo\Desktop\user-ms\target\classes started by Vincenzo in C:\Users\Vincenzo\Desktop\user-ms)
2024-08-31 17:09:12 [restartedMain] DEBUG c.v.user_ms.UserMsApplication - Running with Spring Boot v3.3.2, Spring v6.1.11
2024-08-31 17:09:12 [restartedMain] INFO  c.v.user_ms.UserMsApplication - No active profile set, falling back to 1 default profile: "default"
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:09:12 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Fetching config from server at : http://DESKTOP-INTQUT6.fritz.box:8889/
2024-08-31 17:09:12 [restartedMain] INFO  o.s.c.c.c.ConfigServerConfigDataLoader - Located environment: name=user-ms, profiles=[default], label=null, version=61764a7003a733bbc121eafb20ec437ca3be6b43, state=null
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLoader - Environment user-ms has 1 property sources with 18 properties.
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 17:09:12 [restartedMain] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - discovery enabled
2024-08-31 17:09:12 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-08-31 17:09:12 [restartedMain] INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-08-31 17:09:13 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-08-31 17:09:14 [restartedMain] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 119 ms. Found 1 JPA repository interface.
2024-08-31 17:09:14 [restartedMain] DEBUG o.s.cloud.context.scope.GenericScope - Generating bean factory id from names: [apiTets, applicationAvailability, applicationFactory, applicationTaskExecutor, authenticationEventPublisher, authenticationManagerBuilder, basicErrorController, beanNameHandlerMapping, beanNameViewResolver, beansEndpoint, blockingLoadBalancerClient, braveCurrentTraceContext, bravePropagator, braveSampler, braveSpanCustomizer, braveTracer, braveTracerBridge, braveTracing, cachesEndpoint, caffeineWarnLogger, characterEncodingFilter, classLoaderMetrics, classPathFileSystemWatcher, classPathRestartStrategy, clientConfigServerHealthIndicator, compositeCompatibilityVerifier, compositeDiscoveryClient, compositeSpanHandler, conditionEvaluationDeltaLoggingListener, conditionsReportEndpoint, configClientHealthProperties, configDataContextRefresher, configurationPropertiesBeans, configurationPropertiesRebinder, configurationPropertiesReportEndpoint, controllerEndpointDiscoverer, controllerEndpointHandlerMapping, controllerExposeExcludePropertyEndpointFilter, conventionErrorViewResolver, conversionServicePostProcessor, correlationFieldsCorrelationScopeCustomizer, correlationScopeDecorator, currentSpanCustomizer, data-jpa.repository-aot-processor#0, dataSource, dataSourcePoolMetadataMeterBinder, dataSourceScriptDatabaseInitializer, dbHealthContributor, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$BlockingRegistrationClientConfig, de.codecentric.boot.admin.client.config.SpringBootAdminClientAutoConfiguration$ServletConfiguration, default.org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration.LoadBalancerClientSpecification, default.org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration.LoadBalancerClientSpecification, defaultEurekaClientHttpRequestFactorySupplier, defaultLoadBalancerCacheManager, defaultServletHandlerMapping, defaultTracingObservationHandler, defaultValidator, defaultViewResolver, defaultsBindHandlerAdvisor, deferringLoadBalancerInterceptor, delegatingApplicationListener, discoveryClient, discoveryClientHealthIndicator, discoveryCompositeHealthContributor, diskSpaceHealthIndicator, diskSpaceMetrics, dispatcherServlet, dispatcherServletMappingDescriptionProvider, dispatcherServletRegistration, dumpEndpoint, eagerTaskExecutorMetrics, eagerlyInitializeJmxEndpointExporter, emBeanDefinitionRegistrarPostProcessor, enableGlobalAuthenticationAutowiredConfigurer, endpointCachingOperationInvokerAdvisor, endpointMediaTypes, endpointObjectMapper, endpointObjectMapperWebMvcConfigurer, endpointObjectNameFactory, endpointOperationParameterMapper, entityManagerFactory, entityManagerFactoryBuilder, environmentEndpoint, environmentManager, error, errorAttributes, errorPageCustomizer, errorPageRegistrarBeanPostProcessor, eureka.client.rest-template-timeout-org.springframework.cloud.netflix.eureka.RestTemplateTimeoutProperties, eurekaApplicationInfoManager, eurekaAutoServiceRegistration, eurekaClient, eurekaClientConfigBean, eurekaFeature, eurekaHealthIndicator, eurekaInstanceConfigBean, eurekaLoadBalancerProperties, eurekaRegistration, eurekaServiceRegistry, featuresEndpoint, feignChildContextInitializer, feignClient, feignClientBeanFactoryInitializationCodeGenerator, feignContext, feignFeature, feignTargeter, fileDescriptorMetrics, fileSystemWatcherFactory, fileWatcher, filterMappingDescriptionProvider, flashMapManager, formContentFilter, globalExceptionHandler, gson, gsonBuilder, handlerExceptionResolver, handlerFunctionAdapter, healthCheckController, healthContributorRegistry, healthEndpoint, healthEndpointGroupMembershipValidator, healthEndpointGroups, healthEndpointGroupsBeanPostProcessor, healthHttpCodeStatusMapper, healthStatusAggregator, heapDumpWebEndpoint, hikariDataSourceMeterBinder, hikariPoolDataSourceMetadataProvider, httpMessageConvertersRestClientCustomizer, httpRequestHandlerAdapter, inMemoryDatabaseShutdownExecutor, inMemoryUserDetailsManager, inetUtils, inetUtilsProperties, infoEndpoint, initializeAuthenticationProviderBeanManagerConfigurer, initializeUserDetailsBeanManagerConfigurer, jacksonGeoModule, jacksonObjectMapper, jacksonObjectMapperBuilder, jdbcClient, jdbcConnectionDetails, jdbcConnectionDetailsHikariBeanPostProcessor, jdbcTemplate, jmxAnnotationEndpointDiscoverer, jmxIncludeExcludePropertyEndpointFilter, jmxMBeanExporter, jpa.UserRepository.fragments#0, jpa.named-queries#0, jpaContext, jpaMappingContext, jpaSharedEM_entityManagerFactory, jpaVendorAdapter, jsonComponentModule, jsonMixinModule, jsonMixinModuleEntries, jvmCompilationMetrics, jvmGcMetrics, jvmHeapPressureMetrics, jvmInfoMetrics, jvmMemoryMetrics, jvmThreadMetrics, jwtAuthenticationFilter, jwtService, lbRestClientPostProcessor, lifecycleProcessor, liveReloadServer, liveReloadServerEventListener, loadBalancedRestTemplateInitializerDeprecated, loadBalancerChildContextInitializer, loadBalancerClientFactory, loadBalancerClientsDefaultsMappingsProvider, loadBalancerEagerContextInitializer, loadBalancerInterceptor, loadBalancerRequestFactory, loadBalancerServiceInstanceCookieTransformer, localeCharsetMappingsCustomizer, localeResolver, logFileWebEndpoint, logbackMetrics, loggersEndpoint, loggingRebinder, management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties, management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties, management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties, management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties, management.endpoint.sbom-org.springframework.boot.actuate.sbom.SbomProperties, management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties, management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties, management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties, management.health.db-org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorProperties, management.health.diskspace-org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties, management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties, management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties, management.observations-org.springframework.boot.actuate.autoconfigure.observation.ObservationProperties, management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties, management.simple.metrics.export-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties, management.tracing-org.springframework.boot.actuate.autoconfigure.tracing.TracingProperties, managementServletContext, mappingJackson2HttpMessageConverter, mappingsEndpoint, mbeanExporter, mbeanServer, mdcCorrelationScopeDecoratorBuilder, messageConverters, meterRegistryCloser, meterRegistryPostProcessor, methodValidationPostProcessor, metricsAndTracingObservationHandlerGrouping, metricsEndpoint, metricsHttpClientUriTagFilter, metricsHttpServerUriTagFilter, metricsRepositoryMethodInvocationListener, metricsRepositoryMethodInvocationListenerBeanPostProcessor, micrometerClock, multipartConfigElement, multipartResolver, mvcContentNegotiationManager, mvcConversionService, mvcHandlerMappingIntrospector, mvcHandlerMappingIntrospectorRequestTransformer, mvcPathMatcher, mvcPatternParser, mvcResourceUrlProvider, mvcUriComponentsContributor, mvcUrlPathHelper, mvcValidator, mvcViewResolver, namedParameterJdbcTemplate, objectNamingStrategy, objectPostProcessor, observabilitySchedulingConfigurer, observationRegistry, observationRegistryPostProcessor, observationRestClientCustomizer, observationRestTemplateCustomizer, observedAspect, offsetResolver, optionalLiveReloadServer, org.springframework.aop.config.internalAutoProxyCreator, org.springframework.boot.actuate.autoconfigure.audit.AuditEventsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.beans.BeansEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.cache.CachesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration, org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.health.ReactiveHealthEndpointConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.info.InfoEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.logging.LoggersEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.HeapDumpWebEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.management.ThreadDumpEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.MetricsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.data.RepositoryMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$DataSourcePoolMetadataMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration$HikariDataSourceMetricsConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration$TracingAndMetricsObservationHandlerConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MetricsWithTracingConfiguration, org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$ObservedAspectConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestClientObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration, org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration$MeterFilterConfiguration, org.springframework.boot.actuate.autoconfigure.sbom.SbomEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.scheduling.ScheduledTasksObservabilityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.security.servlet.SecurityRequestMatchersManagementContextConfiguration$MvcRequestMatcherConfiguration, org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BraveAutoConfiguration, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$NoPropagation, org.springframework.boot.actuate.autoconfigure.tracing.BravePropagationConfigurations$PropagationWithBaggage, org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.exchanges.HttpExchangesEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration, org.springframework.boot.actuate.autoconfigure.web.mappings.MappingsEndpointAutoConfiguration$ServletWebConfiguration$SpringMvcConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration, org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration, org.springframework.boot.autoconfigure.AutoConfigurationPackages, org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$AspectJAutoProxyingConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration, org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.http.GsonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration, org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration, org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration, org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration$PooledDataSourceConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceJmxConfiguration$Hikari, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration$JdbcTransactionManagerConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.NamedParameterJdbcTemplateConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration, org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvidersConfiguration$HikariPoolDataSourceMetadataProviderConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration, org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration$PersistenceManagedTypesConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration, org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration, org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$EnableTransactionManagementConfiguration$CglibAutoProxyConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration$TransactionTemplateConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration, org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration, org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration, org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration, org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration, org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration, org.springframework.boot.context.internalConfigurationPropertiesBinder, org.springframework.boot.context.properties.BoundConfigurationProperties, org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor, org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration, org.springframework.boot.devtools.autoconfigure.DevToolsDataSourceAutoConfiguration$DatabaseShutdownExecutorEntityManagerFactoryDependsOnPostProcessor, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$LiveReloadConfiguration, org.springframework.boot.devtools.autoconfigure.LocalDevToolsAutoConfiguration$RestartConfiguration, org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor, org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration, org.springframework.cloud.autoconfigure.LifecycleMvcEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.PauseResumeEndpointsConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshScopeBeanDefinitionEnhancer, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration, org.springframework.cloud.autoconfigure.RefreshEndpointAutoConfiguration$RefreshEndpointConfiguration, org.springframework.cloud.autoconfigure.RestartEndpointWithoutIntegrationConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$ActuatorConfiguration, org.springframework.cloud.client.CommonsClientAutoConfiguration$DiscoveryLoadBalancerConfiguration, org.springframework.cloud.client.ReactiveCommonsClientAutoConfiguration, org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration, org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$LoadBalancerInterceptorConfig, org.springframework.cloud.client.loadbalancer.LoadBalancerDefaultMappingsProviderAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration, org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration, org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration, org.springframework.cloud.commons.config.CommonsConfigAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration, org.springframework.cloud.commons.security.ResourceServerTokenRelayAutoConfiguration$ResourceServerTokenRelayRegistrationAutoConfiguration, org.springframework.cloud.commons.util.UtilAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration, org.springframework.cloud.config.client.ConfigClientAutoConfiguration$ConfigServerHealthIndicatorConfiguration, org.springframework.cloud.configuration.CompatibilityVerifierAutoConfiguration, org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$DefaultLoadBalancerCacheManagerConfiguration, org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCacheManagerWarnConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$EurekaHealthIndicatorConfiguration, org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration, org.springframework.cloud.netflix.eureka.EurekaDiscoveryClientConfiguration$EurekaClientConfigurationRefresher, org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration, org.springframework.cloud.netflix.eureka.loadbalancer.LoadBalancerEurekaAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$DefaultFeignTargeterConfiguration, org.springframework.cloud.openfeign.FeignAutoConfiguration$FeignJacksonConfiguration, org.springframework.cloud.openfeign.loadbalancer.DefaultFeignLoadBalancerConfiguration, org.springframework.cloud.openfeign.loadbalancer.FeignLoadBalancerAutoConfiguration, org.springframework.context.annotation.internalAutowiredAnnotationProcessor, org.springframework.context.annotation.internalCommonAnnotationProcessor, org.springframework.context.annotation.internalConfigurationAnnotationProcessor, org.springframework.context.annotation.internalPersistenceAnnotationProcessor, org.springframework.context.event.internalEventListenerFactory, org.springframework.context.event.internalEventListenerProcessor, org.springframework.data.jpa.repository.support.JpaEvaluationContextExtension, org.springframework.data.jpa.util.JpaMetamodelCacheCleanup, org.springframework.data.web.config.ProjectingArgumentResolverRegistrar, org.springframework.data.web.config.SpringDataJacksonConfiguration, org.springframework.data.web.config.SpringDataWebConfiguration, org.springframework.data.web.config.SpringDataWebSettings, org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration, org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity, org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration, org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration, org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration, org.springframework.transaction.config.internalTransactionAdvisor, org.springframework.transaction.config.internalTransactionalEventListenerFactory, pageJacksonModule, pageModule, pageableCustomizer, pageableResolver, parameterNamesModule, pathMappedEndpoints, persistenceExceptionTranslationPostProcessor, persistenceManagedTypes, pingHealthContributor, platformTransactionManagerCustomizers, preserveErrorControllerTargetClassPostProcessor, privilegeEvaluator, processorMetrics, projectingArgumentResolverBeanPostProcessor, propagatingReceiverTracingObservationHandler, propagatingSenderTracingObservationHandler, propagationFactory, propagationFactoryBuilder, propertiesMeterFilter, propertiesObservationFilter, propertySourcesPlaceholderConfigurer, reactiveHealthContributorRegistry, refreshEndpoint, refreshEventListener, refreshScope, refreshScopeHealthIndicator, refreshScopeLifecycle, registrationClient, registrationListener, registrator, remoteFieldsBaggagePropagationCustomizer, repositoryTagsProvider, requestContextFilter, requestDataValueProcessor, requestMappingHandlerAdapter, requestMappingHandlerMapping, requestMatcherProvider, resourceHandlerMapping, restClientBuilder, restClientBuilderConfigurer, restClientSsl, restTemplateBuilder, restTemplateBuilderConfigurer, restTemplateCustomizer, restTemplateDiscoveryClientOptionalArgs, restTemplateTransportClientFactories, restartingClassPathChangedEventListener, routerFunctionMapping, sbomEndpoint, scheduledTasksEndpoint, scopedTarget.eurekaApplicationInfoManager, scopedTarget.eurekaClient, scopedTarget.eurekaRegistration, securityConfig, securityFilterChain, securityFilterChainRegistration, server-org.springframework.boot.autoconfigure.web.ServerProperties, serviceManagementMetadataProvider, serviceRegistryEndpoint, servletEndpointDiscoverer, servletEndpointRegistrar, servletExposeExcludePropertyEndpointFilter, servletMappingDescriptionProvider, servletWebChildContextFactory, servletWebServerFactoryCustomizer, simpleAsyncTaskExecutorBuilder, simpleAsyncTaskSchedulerBuilder, simpleConfig, simpleControllerHandlerAdapter, simpleDiscoveryClient, simpleDiscoveryProperties, simpleMeterRegistry, sleuthPresentVerifier, sortCustomizer, sortModule, sortResolver, spring.boot.admin.client-de.codecentric.boot.admin.client.config.ClientProperties, spring.boot.admin.client.instance-de.codecentric.boot.admin.client.config.InstanceProperties, spring.cloud.compatibility-verifier-org.springframework.cloud.configuration.CompatibilityVerifierProperties, spring.cloud.discovery.client.health-indicator-org.springframework.cloud.client.discovery.health.DiscoveryClientHealthIndicatorProperties, spring.cloud.loadbalancer-org.springframework.cloud.client.loadbalancer.LoadBalancerClientsProperties, spring.cloud.loadbalancer.cache-org.springframework.cloud.loadbalancer.cache.LoadBalancerCacheProperties, spring.cloud.loadbalancer.eager-load-org.springframework.cloud.client.loadbalancer.LoadBalancerEagerLoadProperties, spring.cloud.openfeign.client-org.springframework.cloud.openfeign.FeignClientProperties, spring.cloud.openfeign.encoder-org.springframework.cloud.openfeign.support.FeignEncoderProperties, spring.cloud.openfeign.httpclient-org.springframework.cloud.openfeign.support.FeignHttpClientProperties, spring.cloud.refresh-org.springframework.cloud.autoconfigure.RefreshAutoConfiguration$RefreshProperties, spring.cloud.service-registry.auto-registration-org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationProperties, spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties, spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties, spring.devtools-org.springframework.boot.devtools.autoconfigure.DevToolsProperties, spring.gson-org.springframework.boot.autoconfigure.gson.GsonProperties, spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties, spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties, spring.jdbc-org.springframework.boot.autoconfigure.jdbc.JdbcProperties, spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties, spring.jpa-org.springframework.boot.autoconfigure.orm.jpa.JpaProperties, spring.jpa.hibernate-org.springframework.boot.autoconfigure.orm.jpa.HibernateProperties, spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties, spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties, spring.reactor-org.springframework.boot.autoconfigure.reactor.ReactorProperties, spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties, spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties, spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties, spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties, spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties, spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties, spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties, spring.web-org.springframework.boot.autoconfigure.web.WebProperties, springApplicationAdminRegistrar, springBootVersionVerifier, springCloudCommonsFeatures, springSecurityFilterChain, springSecurityHandlerMappingIntrospectorBeanDefinitionRegistryPostProcessor, sslBundleRegistry, sslPropertiesSslBundleRegistrar, standardGsonBuilderCustomizer, standardJacksonObjectMapperBuilderCustomizer, startupDateMetadataContributor, startupTimeMetrics, stringHttpMessageConverter, taskExecutorBuilder, taskSchedulerBuilder, themeResolver, threadPoolTaskExecutorBuilder, threadPoolTaskSchedulerBuilder, tlsProperties, tomcatMetricsBinder, tomcatServletWebServerFactory, tomcatServletWebServerFactoryCustomizer, tomcatWebServerFactoryCustomizer, tracingAwareMeterObservationHandler, transactionAttributeSource, transactionExecutionListeners, transactionInterceptor, transactionManager, transactionTemplate, uptimeMetrics, userController, userMsApplication, userRepository, userServiceImpl, viewControllerHandlerMapping, viewNameTranslator, viewResolver, webEndpointDiscoverer, webEndpointPathMapper, webEndpointServletHandlerMapping, webExposeExcludePropertyEndpointFilter, webMvcObservationFilter, webSecurityExpressionHandler, webServerFactoryCustomizerBeanPostProcessor, websocketServletWebServerCustomizer, welcomePageHandlerMapping, welcomePageNotAcceptableHandlerMapping, xForwarderHeadersFeignTransformer, xForwarderHeadersTransformer, zoneConfig]
2024-08-31 17:09:14 [restartedMain] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=625c296d-efb1-34da-bdff-5bd87c8aceb1
2024-08-31 17:09:14 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig' of type [org.springframework.cloud.client.loadbalancer.LoadBalancerAutoConfiguration$DeferringLoadBalancerInterceptorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [lbRestClientPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2024-08-31 17:09:14 [restartedMain] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'deferringLoadBalancerInterceptor' of type [org.springframework.cloud.client.loadbalancer.DeferringLoadBalancerInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected into a currently created BeanPostProcessor [lbRestClientPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies.
2024-08-31 17:09:15 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8007 (http)
2024-08-31 17:09:15 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8007"]
2024-08-31 17:09:15 [restartedMain] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-08-31 17:09:15 [restartedMain] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.26]
2024-08-31 17:09:15 [restartedMain] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-08-31 17:09:15 [restartedMain] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2219 ms
2024-08-31 17:09:15 [restartedMain] DEBUG c.v.u.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2024-08-31 17:09:15 [restartedMain] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-08-31 17:09:15 [restartedMain] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-08-31 17:09:15 [restartedMain] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-08-31 17:09:15 [restartedMain] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-08-31 17:09:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-08-31 17:09:16 [restartedMain] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@41556268
2024-08-31 17:09:16 [restartedMain] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-08-31 17:09:17 [restartedMain] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-08-31 17:09:17 [restartedMain] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 17:09:17 [restartedMain] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 06a9b7c0-e71d-49a7-855d-5e93c9a4dd33

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2024-08-31 17:09:17 [restartedMain] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2024-08-31 17:09:18 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data healthcheckUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/health
2024-08-31 17:09:18 [restartedMain] DEBUG o.s.c.n.e.m.DefaultManagementMetadataProvider - Constructed eureka meta-data statusPageUrl: http://DESKTOP-INTQUT6.fritz.box:8007/actuator/info
2024-08-31 17:09:18 [restartedMain] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 1 endpoint beneath base path '/actuator'
2024-08-31 17:09:19 [restartedMain] WARN  o.s.b.d.a.OptionalLiveReloadServer - Unable to start LiveReload server
2024-08-31 17:09:19 [restartedMain] INFO  o.s.c.n.e.c.DiscoveryClientOptionalArgsConfiguration - Eureka HTTP Client uses RestTemplate.
2024-08-31 17:09:19 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 17:09:19 [restartedMain] DEBUG o.s.c.c.SpringBootVersionVerifier - Version found in Boot manifest [3.3.2]
2024-08-31 17:09:19 [restartedMain] DEBUG o.s.c.c.CompositeCompatibilityVerifier - All conditions are passing
2024-08-31 17:09:19 [restartedMain] WARN  o.s.c.l.c.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger - Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it's recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2024-08-31 17:09:19 [restartedMain] INFO  o.s.c.n.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
2024-08-31 17:09:19 [restartedMain] INFO  c.n.d.s.r.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
2024-08-31 17:09:19 [restartedMain] DEBUG c.n.discovery.endpoint.EndpointUtils - The availability zone for the given region us-east-1 are [defaultZone]
2024-08-31 17:09:19 [restartedMain] DEBUG c.n.d.s.r.aws.ConfigClusterResolver - Config resolved to [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 17:09:19 [restartedMain] DEBUG c.n.d.s.r.a.ZoneAffinityClusterResolver - Local zone=defaultZone; resolved to: [AwsEndpoint{ serviceUrl='http://user:df9ff0f0-cd26-4245-9ae2-4fc70b68b75f@localhost:8761/eureka/', region='us-east-1', zone='defaultZone'}]
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Disable delta property : false
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Force full registry fetch : false
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application is null : false
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Application version is -1: true
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
2024-08-31 17:09:19 [restartedMain] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 17:09:19 [restartedMain] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - The response status is 200
2024-08-31 17:09:19 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - Got full registry with apps hashcode UP_1_
2024-08-31 17:09:19 [restartedMain] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 1
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
2024-08-31 17:09:19 [restartedMain] INFO  c.n.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1725116959649 with initial instances count: 1
2024-08-31 17:09:19 [restartedMain] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Registering application USER-MS with eureka with status UP
2024-08-31 17:09:19 [restartedMain] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725116959658, current=UP, previous=STARTING]
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 17:09:19 [restartedMain] DEBUG o.s.c.c.d.h.DiscoveryClientHealthIndicator - Discovery Client has been initialized
2024-08-31 17:09:19 [restartedMain] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8007"]
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.SessionedEurekaHttpClient - Ending a session and starting anew
2024-08-31 17:09:19 [restartedMain] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8007 (http) with context path '/'
2024-08-31 17:09:19 [restartedMain] INFO  o.s.c.n.e.s.EurekaAutoServiceRegistration - Updating port to 8007
2024-08-31 17:09:19 [restartedMain] INFO  c.v.user_ms.UserMsApplication - Started UserMsApplication in 9.399 seconds (process running for 10.203)
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.d.s.t.d.RedirectingEurekaHttpClient - Pinning to endpoint null
2024-08-31 17:09:19 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 17:09:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:09:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:09:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:09:49 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:09:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@3543612 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@41d465ea]]
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:09:49 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:09:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:19 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@90aa4f2 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@6b936b0c]]
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:10:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:10:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:10:50 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@6f2011e7 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@1f1bcc04]]
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:10:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:10:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:19 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:20 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@5b38af3d instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@227ef350]]
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:11:20 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:11:29 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:39 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:49 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:11:50 [DiscoveryClient-HeartbeatExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - Heartbeat status: 200
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Got delta update with apps hashcode UP_2_
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Added instance DESKTOP-INTQUT6.fritz.box:user-ms:8007 to the existing apps in region null
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of instances fetched by the delta processor : 1
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - The total number of all instances in the client now is 2
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Locating configserver (configserver) via discovery
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider finding instances for configserver
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.n.e.c.EurekaConfigServerInstanceProvider - eurekaConfigServerInstanceProvider found 1 instance(s) for configserver, [[EurekaServiceInstance@13e8a8b7 instance = InstanceInfo [instanceId = DESKTOP-INTQUT6.fritz.box:configserver:8889, appName = CONFIGSERVER, hostName = DESKTOP-INTQUT6.fritz.box, status = UP, ipAddr = 192.168.1.103, port = 8889, securePort = 443, dataCenterInfo = com.netflix.appinfo.MyDataCenterInfo@4364db2d]]
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Located configserver (configserver) via discovery. No of instances found: 1
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG o.s.c.c.c.ConfigServerConfigDataLocationResolver - Updating config uris to [http://DESKTOP-INTQUT6.fritz.box:8889/]
2024-08-31 17:11:50 [DiscoveryClient-CacheRefreshExecutor-%d] DEBUG c.netflix.discovery.DiscoveryClient - Completed cache refresh task for discovery. All Apps hash code is Local region apps hashcode: UP_2_, is fetching remote regions? false 
2024-08-31 17:11:59 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:12:09 [registrationTask1] ERROR o.s.s.s.TaskUtils$LoggingErrorHandler - Unexpected error occurred in scheduled task
java.lang.IllegalStateException: Either health or status endpoint must be enabled!
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthEndpointPath(DefaultApplicationFactory.java:213)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.getHealthUrl(DefaultApplicationFactory.java:153)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationFactory.createApplication(DefaultApplicationFactory.java:79)
	at de.codecentric.boot.admin.client.registration.DefaultApplicationRegistrator.register(DefaultApplicationRegistrator.java:56)
	at org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-08-31 17:12:13 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.b.a.SpringApplicationAdminMXBeanRegistrar$SpringApplicationAdmin - Application shutdown requested.
2024-08-31 17:12:13 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.c.n.e.s.EurekaServiceRegistry - Unregistering application USER-MS with eureka with status DOWN
2024-08-31 17:12:13 [RMI TCP Connection(5)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1725117133986, current=DOWN, previous=UP]
2024-08-31 17:12:13 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Executing on-demand update of local InstanceInfo
2024-08-31 17:12:13 [DiscoveryClient-InstanceInfoReplicator-%d] DEBUG c.n.discovery.InstanceInfoReplicator - Canceling the latest scheduled update, it will be rescheduled at the end of on demand update
2024-08-31 17:12:13 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007: registering service...
2024-08-31 17:12:13 [RMI TCP Connection(5)-127.0.0.1] INFO  o.a.coyote.http11.Http11NioProtocol - Stopping ProtocolHandler ["http-nio-8007"]
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Shutting down DiscoveryClient ...
2024-08-31 17:12:14 [DiscoveryClient-InstanceInfoReplicator-%d] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - registration status: 204
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Unregistering ...
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-MS/DESKTOP-INTQUT6.fritz.box:user-ms:8007 - deregister  status: 200
2024-08-31 17:12:14 [RMI TCP Connection(5)-127.0.0.1] INFO  c.netflix.discovery.DiscoveryClient - Completed shut down of DiscoveryClient
